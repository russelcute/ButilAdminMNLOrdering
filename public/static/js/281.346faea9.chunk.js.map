{"version":3,"file":"static/js/281.346faea9.chunk.js","mappings":"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","sources":["components/Snackbar/index.tsx","models/rider.ts","models/users.ts","pages/Admin/BulkedActions.tsx","pages/Admin/AdminTable.tsx","pages/Admin/index.tsx"],"sourcesContent":["import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nexport interface SnackbarProps {\n    openSnackbar: boolean,\n    success: boolean,\n    message: string\n}\n\ninterface Props extends SnackbarProps {\n    setOpenSnackbar: (value: boolean) => void\n}\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nfunction SnackbarApp({ openSnackbar, success, message, setOpenSnackbar }: Props) {\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n          return;\n        }\n    \n        setOpenSnackbar(false);\n    };\n\n    return (\n        <Snackbar open={openSnackbar} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity={success ? 'success' : 'error'} sx={{ width: '100%' }}>\n                {message}\n            </Alert>\n        </Snackbar>\n    )\n}\n\nexport default SnackbarApp\n","import { DocumentSnapshot } from 'firebase/firestore';\nimport { UserInterface } from './users';\n\nexport interface RiderInterface {\n    account?: UserInterface;\n    riderId?: string;\n    active: boolean;\n    assignedDeliver?: string[];\n}\n\nclass RiderModel {\n    riderObject: RiderInterface;\n\n    constructor(rider: RiderInterface) {\n        this.riderObject = rider;\n    }\n\n    getRider(): RiderInterface {\n        return this.riderObject;\n    }\n\n    setAccount(account: UserInterface) {\n        this.riderObject.account = account;\n    }\n\n}\n\nexport function convertRiderQuerySnapshots(snapshot: DocumentSnapshot) {\n    const riderData = snapshot.data();\n    const riderQueryData: RiderInterface = {\n        riderId: snapshot.id,\n        active: riderData.active,\n        assignedDeliver: riderData.assignedDeliver\n    };\n\n    return new RiderModel(riderQueryData);\n}\n\nexport default RiderModel;","import { DocumentSnapshot } from 'firebase/firestore';\n\nexport interface UserInterface {\n    userId?: string;\n    contact: string;\n    firstName: string;\n    lastName: string;\n    gender: string;\n}\n\nclass UserModel {\n    userObject: UserInterface;\n\n    constructor(userObject: UserInterface) {\n        this.userObject = userObject;\n    }\n\n    getUser(): UserInterface {\n        return this.userObject;\n    }\n}\n\nexport function convertUserQuerySnapshots(snapshot: DocumentSnapshot) {\n    const userData = snapshot.data();\n    const userQueryData: UserInterface = {\n        userId: snapshot.id,\n        contact: userData.contact,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        gender: userData.gender\n    };\n\n    return new UserModel(userQueryData);\n}\n\nexport default UserModel;","import { useState, useRef } from 'react';\n\nimport {\n  Box,\n  Menu,\n  IconButton,\n  ListItemText,\n  ListItem,\n  List,\n  Typography\n} from '@mui/material';\n\nimport MoreVertTwoToneIcon from '@mui/icons-material/MoreVertTwoTone';\n\n\ninterface Props {\n    size: number,\n    batchDemoteToUser: () => void\n}\n\nfunction BulkedActions({ size, batchDemoteToUser }: Props) {\n  const [onMenuOpen, menuOpen] = useState<boolean>(false);\n  const moreRef = useRef<HTMLButtonElement | null>(null);\n\n  const openMenu = (): void => {\n    menuOpen(true);\n  };\n\n  const closeMenu = (): void => {\n    menuOpen(false);\n  };\n\n  function demoteAllToUser() {\n    batchDemoteToUser();\n    closeMenu();\n  }\n\n  return (\n    <>\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Box display=\"flex\" alignItems=\"center\">\n          <Typography variant=\"h5\" color=\"text.secondary\">\n            {size > 1 ? size + ' users selected.' : size + ' user selected.'}\n          </Typography>\n        </Box>\n        <IconButton\n          color=\"primary\"\n          onClick={openMenu}\n          ref={moreRef}\n          sx={{ ml: 2, p: 1 }}\n        >\n          <MoreVertTwoToneIcon />\n        </IconButton>\n      </Box>\n\n      <Menu\n        keepMounted\n        anchorEl={moreRef.current}\n        open={onMenuOpen}\n        onClose={closeMenu}\n        anchorOrigin={{\n          vertical: 'center',\n          horizontal: 'center'\n        }}\n        transformOrigin={{\n          vertical: 'center',\n          horizontal: 'center'\n        }}\n\n      >\n        <List sx={{ p: 1 }} component=\"nav\">\n          <ListItem button onClick={event =>  demoteAllToUser()}>\n            <ListItemText primary=\"Demote Admin to User\"/>\n          </ListItem>\n        </List>\n      </Menu>\n    </>\n  );\n}\n\nexport default BulkedActions;\n","import React, { useState, useEffect } from 'react';\nimport {\n    Tooltip,\n    Divider,\n    Box,\n    FormControl,\n    InputLabel,\n    Card,\n    Checkbox,\n    IconButton,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TablePagination,\n    TableRow,\n    TableContainer,\n    Select,\n    MenuItem,\n    Typography,\n    useTheme,\n    CardHeader\n  } from '@mui/material';\nimport ManageAccountsIcon from '@mui/icons-material/ManageAccounts';\nimport BulkedActions from './BulkedActions';\nimport { RiderInterface } from 'src/models/rider';\n\ntype UserGender = 'male' | 'female';\n\nconst statusOptions = [\n    {\n        id: 'all',\n        name: 'All'\n    },\n    {\n        id: 'male',\n        name: 'Male'\n    },\n    {\n        id: 'female',\n        name: 'Female'\n    }\n];\n\ninterface Filters {\n    status?: UserGender;\n}\n\ninterface TableProps {\n    users: RiderInterface[],\n    demoteToUser: (riderId: string) => void\n}\n\nconst applyPagination = (\n    userList: RiderInterface[],\n    page: number,\n    limit: number\n  ): RiderInterface[] => {\n    return userList.slice(page * limit, page * limit + limit);\n}\n\nexport default function RiderTable({ users, demoteToUser }: TableProps) {\n    const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n    const [page, setPage] = useState<number>(0);\n    const [limit, setLimit] = useState<number>(5);\n    const [filters, setFilters] = useState<Filters>({\n        status: null\n    });\n    const [filteredUsers, setFilteredUsers] = useState<RiderInterface[]>([]);\n    const [paginatedUsers, setPaginatedUsers] = useState<RiderInterface[]>([]);\n    const theme = useTheme();\n\n    useEffect(() => {\n        switch (filters.status) {\n            case 'male':\n                const newMaleArray = users.filter(user => user.account.gender === 'Male');\n                setFilteredUsers(state => newMaleArray);\n                break;\n            case 'female':\n                const newFemaleArray = users.filter(user => user.account.gender === 'Female');\n                setFilteredUsers(state => newFemaleArray);\n                break;\n            default: \n                setFilteredUsers(state => users);\n        }\n    }, [users, filters])\n\n    useEffect(() => {\n        const pageUsers = applyPagination(filteredUsers, page, limit);\n        setPaginatedUsers(state => pageUsers)\n    }, [page, limit, filteredUsers])\n\n    const handleStatusChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        let value = null;\n    \n        if (e.target.value !== 'all') {\n          value = e.target.value;\n        }\n    \n        setFilters((prevFilters) => ({\n          ...prevFilters,\n          status: value\n        }));\n    };\n\n    const handlePageChange = (event: any, newPage: number): void => {\n        setPage(newPage);\n    }\n    \n    const handleLimitChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        setLimit(parseInt(event.target.value));\n    }\n\n    function handleSelectOneUser(\n        event: React.ChangeEvent<HTMLInputElement>,\n        userId: string\n      ): void {\n        if (!selectedUsers.includes(userId)) {\n          setSelectedUsers((prevSelected) => [\n            ...prevSelected,\n            userId\n          ]);\n        } else {\n          setSelectedUsers((prevSelected) =>\n            prevSelected.filter((id) => id !== userId)\n          );\n        }\n    }\n\n    function batchDemoteToUser() {\n        selectedUsers.forEach(id => {\n            demoteToUser(id);\n        });\n        setSelectedUsers([]);\n    }\n\n    return (\n        <Card>\n            {selectedUsers.length > 0 && (\n                <Box flex={1} p={2}>\n                    <BulkedActions size={selectedUsers.length} batchDemoteToUser={() => batchDemoteToUser()} />\n                </Box>\n            )}\n            {selectedUsers.length === 0 && (\n                <CardHeader\n                    action={\n                        <Box width={150}>\n                        <FormControl fullWidth variant=\"outlined\">\n                            <InputLabel>Status</InputLabel>\n                            <Select\n                                value={filters.status || 'all'}\n                                onChange={handleStatusChange}\n                                label=\"Status\"\n                                autoWidth\n                            >\n                                {statusOptions.map((statusOption) => (\n                                    <MenuItem key={statusOption.id} value={statusOption.id}>\n                                    {statusOption.name}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                        </Box>\n                    }\n                    title=\"Admin List\"\n                />\n            )}\n            <Divider />\n            <TableContainer>\n                <Table>\n                    <TableHead>\n                    <TableRow>\n                        <TableCell padding=\"checkbox\">\n                        </TableCell>\n                        <TableCell>User ID</TableCell>\n                        <TableCell>First Name</TableCell>\n                        <TableCell>Last Name</TableCell>\n                        <TableCell>Gender</TableCell>\n                        <TableCell>Contact</TableCell>\n                        <TableCell align=\"right\">Actions</TableCell>\n                    </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {paginatedUsers.map(user => {\n                            const isUserSelected = selectedUsers.includes(user.riderId);\n                            return (\n                                <TableRow\n                                    hover\n                                    key={user.account.userId}\n                                    selected={isUserSelected}\n                                >\n                                    <TableCell padding=\"checkbox\">\n                                        <Checkbox\n                                            color=\"primary\"\n                                            checked={isUserSelected}\n                                            value={isUserSelected}\n                                            onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                                                handleSelectOneUser(event, user.riderId)\n                                            }\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography\n                                            variant=\"body1\"\n                                            fontWeight=\"bold\"\n                                            color=\"text.primary\"\n                                            gutterBottom\n                                            noWrap\n                                        >\n                                            {user.account.userId}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography\n                                            variant=\"body1\"\n                                            fontWeight=\"bold\"\n                                            color=\"text.primary\"\n                                            gutterBottom\n                                            noWrap\n                                        >\n                                            {user.account.firstName}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography\n                                            variant=\"body1\"\n                                            fontWeight=\"bold\"\n                                            color=\"text.primary\"\n                                            gutterBottom\n                                            noWrap\n                                        >\n                                            {user.account.lastName}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography\n                                            variant=\"body1\"\n                                            fontWeight=\"bold\"\n                                            color=\"text.primary\"\n                                            gutterBottom\n                                            noWrap\n                                        >\n                                            {user.account.gender}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography\n                                            variant=\"body1\"\n                                            fontWeight=\"bold\"\n                                            color=\"text.primary\"\n                                            gutterBottom\n                                            noWrap\n                                        >\n                                            {user.account.contact}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell align=\"right\">\n                                        <Tooltip title=\"Demote to User\" arrow>\n                                        <IconButton\n                                            sx={{\n                                            '&:hover': { background: theme.colors.error.lighter },\n                                            color: theme.palette.error.main\n                                            }}\n                                            color=\"inherit\"\n                                            size=\"small\"\n                                            onClick={event => demoteToUser(user.account.userId)}\n                                        >\n                                            <ManageAccountsIcon fontSize=\"small\" />\n                                        </IconButton>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                            )\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <Box p={2}>\n            <TablePagination\n                component=\"div\"\n                count={filteredUsers.length}\n                onPageChange={handlePageChange}\n                onRowsPerPageChange={handleLimitChange}\n                page={page}\n                rowsPerPage={limit}\n                rowsPerPageOptions={[5, 10, 25, 30]}\n            />\n            </Box>\n        </Card>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport { useNavigate } from 'react-router-dom';\n\n//firestore\nimport { useFirebaseAuth } from 'src/contexts/FirebaseAuthProvider';\nimport { collection, getDocs, deleteDoc, doc } from \"firebase/firestore\"; \nimport { convertUserQuerySnapshots } from 'src/models/users';\nimport RiderModel, { RiderInterface, convertRiderQuerySnapshots } from 'src/models/rider';\n\n//componets\nimport AdminTable from './AdminTable';\nimport SnackbarApp, { SnackbarProps } from 'src/components/Snackbar';\n\n//icons\nimport AddIcon from '@mui/icons-material/Add';\n\nfunction AdminList() {\n    const { database } = useFirebaseAuth();\n    const navigate = useNavigate();\n    const [butilRiders, setButilRiders] = useState<RiderInterface[]>([]);\n    const [refreshData, setRefreshData] = useState<boolean>(false);\n    const [snackbarApp, setSnackBarApp] = useState<SnackbarProps>({\n        openSnackbar: false,\n        success: true,\n        message: ''\n    });\n\n    useEffect(() => {\n        async function getUsers() {\n            let riderList: RiderInterface[] = [];\n            let finalList: RiderInterface[] = [];\n            const querySnapshot = await getDocs(collection(database, \"accounts\"));\n            const riderQuery = await getDocs(collection(database, \"admin\"));\n\n            riderQuery.forEach((doc) => {\n                const currentRider = convertRiderQuerySnapshots(doc);\n                riderList.push(currentRider.getRider());\n            })\n\n            querySnapshot.forEach((doc) => {\n                const currentUser = convertUserQuerySnapshots(doc);\n                \n                riderList.forEach(rider => {\n                    const account = currentUser.getUser();\n\n                    if (rider.riderId === account.userId) {\n                        const riderModel = new RiderModel(rider);\n                        riderModel.setAccount(account);\n\n                        finalList.push(riderModel.getRider());\n                    }\n                })\n            });\n\n            setButilRiders(state => finalList);\n        }\n\n        getUsers();\n    }, [database, refreshData]);\n\n    function demoteRiderToUser(userId: string) {\n        deleteDoc(doc(database, \"admin\", userId)).then(response => {\n            setSnackBarApp({ ...snackbarApp, openSnackbar: true, success: true, message: 'Removed admin successfully!' });\n        }).catch(error => {\n            setSnackBarApp({ ...snackbarApp, openSnackbar: true, success: false, message: 'Failed to remover admin.' });\n        });\n        setRefreshData(!refreshData);\n    }\n\n    return (\n        <>\n        <Helmet>\n            <title>Admin</title>\n        </Helmet>\n        <Container>\n            <Box sx={{ \n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                    marginTop: 5,\n                    marginBottom: 3\n                }}>\n                <Typography variant=\"h1\" color=\"primary\">Admin</Typography>\n                <Button variant=\"contained\" startIcon={<AddIcon/>} onClick={event => navigate('/dashboards/users')}>Add Admin</Button>\n            </Box>\n            <AdminTable users={butilRiders} demoteToUser={userId => demoteRiderToUser(userId)} />\n        </Container>\n        <SnackbarApp openSnackbar={snackbarApp.openSnackbar} success={snackbarApp.success} message={snackbarApp.message} setOpenSnackbar={value => setSnackBarApp({ ...snackbarApp, openSnackbar: value })} />\n        </>\n    )\n}\n\nexport default AdminList\n"],"names":["Alert","React","props","ref","elevation","variant","openSnackbar","success","message","setOpenSnackbar","handleClose","event","reason","open","autoHideDuration","onClose","severity","sx","width","RiderModel","rider","riderObject","this","account","convertRiderQuerySnapshots","snapshot","riderData","data","riderQueryData","riderId","id","active","assignedDeliver","UserModel","userObject","convertUserQuerySnapshots","userData","userQueryData","userId","contact","firstName","lastName","gender","size","batchDemoteToUser","useState","onMenuOpen","menuOpen","moreRef","useRef","closeMenu","Box","display","alignItems","justifyContent","Typography","color","IconButton","onClick","ml","p","MoreVertTwoTone","Menu","keepMounted","anchorEl","current","anchorOrigin","vertical","horizontal","transformOrigin","List","component","ListItem","button","ListItemText","primary","statusOptions","name","RiderTable","users","demoteToUser","selectedUsers","setSelectedUsers","page","setPage","limit","setLimit","status","filters","setFilters","filteredUsers","setFilteredUsers","paginatedUsers","setPaginatedUsers","theme","useTheme","useEffect","newMaleArray","filter","user","state","newFemaleArray","pageUsers","userList","slice","applyPagination","Card","length","flex","forEach","CardHeader","action","FormControl","fullWidth","InputLabel","Select","value","onChange","e","target","prevFilters","label","autoWidth","map","statusOption","MenuItem","title","Divider","TableContainer","Table","TableHead","TableRow","TableCell","padding","align","TableBody","isUserSelected","includes","hover","selected","Checkbox","checked","prevSelected","fontWeight","gutterBottom","noWrap","Tooltip","arrow","background","colors","error","lighter","palette","main","ManageAccounts","fontSize","TablePagination","count","onPageChange","newPage","onRowsPerPageChange","parseInt","rowsPerPage","rowsPerPageOptions","database","useFirebaseAuth","navigate","useNavigate","butilRiders","setButilRiders","refreshData","setRefreshData","snackbarApp","setSnackBarApp","riderList","finalList","getDocs","collection","querySnapshot","doc","currentRider","push","getRider","currentUser","getUser","riderModel","setAccount","getUsers","Container","marginTop","marginBottom","Button","startIcon","Add","deleteDoc","then","response","catch","demoteRiderToUser","Snackbar"],"sourceRoot":""}